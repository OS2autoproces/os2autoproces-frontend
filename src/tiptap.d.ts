/** Declaration file generated by dts-gen */

declare module 'tiptap' {
  export class Doc {
    constructor(...args: any[]);
  }

  export class Editor {
    constructor(...args: any[]);

    blur(): void;

    clearContent(...args: any[]): void;

    createCommands(): any;

    createDocument(content: any, ...args: any[]): any;

    createExtensions(): any;

    createInputRules(): any;

    createKeymaps(): any;

    createMarks(): any;

    createNodes(): any;

    createPasteRules(): any;

    createPlugins(): any;

    createSchema(): any;

    createState(): any;

    createView(...args: any[]): any;

    destroy(): void;

    dispatchTransaction(transaction: any): void;

    emitUpdate(transaction: any): void;

    focus(...args: any[]): any;

    getHTML(): any;

    getJSON(): any;

    getMarkAttrs(...args: any[]): any;

    getNodeAttrs(...args: any[]): any;

    getSchemaJSON(): any;

    init(...args: any[]): void;

    initNodeViews(_ref: any): any;

    registerPlugin(...args: any[]): void;

    resolveSelection(...args: any[]): any;

    setActiveNodesAndMarks(...args: any[]): any;

    setContent(...args: any[]): void;

    setOptions(options: any): void;

    setParentComponent(...args: any[]): void;

    setSelection(...args: any[]): void;

    unregisterPlugin(...args: any[]): any;
  }

  export class Extension {
    constructor(...args: any[]);

    bindEditor(...args: any[]): void;

    init(): any;

    inputRules(): any;

    keys(): any;

    pasteRules(): any;
  }

  export class Mark {
    constructor(...args: any[]);

    command(): any;
  }

  export class Node {
    constructor(...args: any[]);

    command(): any;
  }

  export class NodeSelection {
    constructor($pos: any);

    content(): any;

    eq(other: any): any;

    getBookmark(): any;

    map(doc: any, mapping: any): any;

    toJSON(): any;

    static atEnd(doc: any): any;

    static atStart(doc: any): any;

    static create(doc: any, from: any): any;

    static findFrom($pos: any, dir: any, textOnly: any): any;

    static fromJSON(doc: any, json: any): any;

    static isSelectable(node: any): any;

    static jsonID(id: any, selectionClass: any): any;

    static near($pos: any, bias: any): any;
  }

  export class Paragraph {
    constructor(...args: any[]);

    commands(_ref: any): any;
  }

  export class Plugin {
    constructor(spec: any);

    getState(state: any): any;
  }

  export class PluginKey {
    constructor(name: any);

    get(state: any): any;

    getState(state: any): any;
  }

  export class Text {
    constructor(...args: any[]);
  }

  export class TextSelection {
    constructor($anchor: any, $head: any);

    eq(other: any): any;

    getBookmark(): any;

    map(doc: any, mapping: any): any;

    replace(tr: any, content: any): void;

    toJSON(): any;

    static atEnd(doc: any): any;

    static atStart(doc: any): any;

    static between($anchor: any, $head: any, bias: any): any;

    static create(doc: any, anchor: any, head: any): any;

    static findFrom($pos: any, dir: any, textOnly: any): any;

    static fromJSON(doc: any, json: any): any;

    static jsonID(id: any, selectionClass: any): any;

    static near($pos: any, bias: any): any;
  }

  export namespace EditorContent {
    const props: {
      editor: {
        default: any;
        type: any;
      };
    };

    const watch: {
      editor: {
        handler: any;
        immediate: boolean;
      };
    };

    function beforeDestroy(): void;

    function render(createElement: any): any;
  }

  export namespace EditorFloatingMenu {
    const props: {
      editor: {
        default: any;
        type: any;
      };
    };

    const watch: {
      editor: {
        handler: any;
        immediate: boolean;
      };
    };

    function beforeDestroy(): void;

    function data(): any;

    function render(): any;
  }

  export namespace EditorMenuBar {
    const props: {
      editor: {
        default: any;
        type: any;
      };
    };

    const watch: {
      editor: {
        handler: any;
        immediate: boolean;
      };
    };

    function data(): any;

    function render(): any;
  }

  export namespace EditorMenuBubble {
    const props: {
      editor: {
        default: any;
        type: any;
      };
      keepInBounds: {
        default: boolean;
        type: any;
      };
    };

    const watch: {
      editor: {
        handler: any;
        immediate: boolean;
      };
    };

    function beforeDestroy(): void;

    function data(): any;

    function render(): any;
  }
}
